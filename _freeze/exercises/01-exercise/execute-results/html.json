{
  "hash": "1430a0c51446230a9309fc2b6b77371e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 1\"\n---\n\n\n\n\n# Exercise 1.1\n\nConsider $\\boldsymbol{Y}=(Y_1, \\ldots, Y_3)^\\top \\in \\mathbb{S}_{2}$ a trivariate vector, where $\\boldsymbol{Y} \\sim \\mathsf{Dir}(\\alpha_1, \\alpha_2, \\alpha_3)$\n\na. Derive the marginal distribution of $(Y_1, Y_2)$.\nb. Derive the conditional distribution of $Y_3 \\mid (Y_1, Y_2)$.\n\n\n# Exercise 1.2\n\nConsider a simple random sample of size $n$ from the Wald distribution, with density\n\\begin{align*}\nf(y; \\nu, \\lambda) = \\left(\\frac{\\lambda}{2\\pi y^{3}}\\right)^{1/2} \\exp\\left\\{ - \\frac{\\lambda (y-\\nu)^2}{2\\nu^2y}\\right\\}\\mathrm{I}(y > 0)\n\\end{align*}\nfor location $\\nu >0$ and shape $\\tau>0$.\n\n\na. Write down the likelihood and show that it can be written in terms of the sufficient statistics $\\sum_{i=1}^n y_i$ and $\\sum_{i=1} y_i^{-1}$.\nb. Derive the Fisher information matrix\n\n\n## Exercise 1.3\n\nConsider the Laplace family of distribution, $\\mathsf{La}(\\nu, \\tau)$, with density\n\\begin{align*}\ng(x; \\nu, \\tau) = \\frac{1}{2\\tau} \\exp\\left(- \\frac{|x-\\nu|}{\\tau}\\right), \\qquad \\nu \\in \\mathbb{R}, \\tau > 0\n\\end{align*}\nas a candidate distribution for rejection sampling from $\\mathsf{No}(0,1)$.\n\n1. Provide an inversion sampling algorithm to generate from $\\mathsf{La}(\\nu, \\tau)$.\n2. Can you use the proposal to generate from a standard Gaussian? for Student-$t$ with 1 degree of freedom? Justify your answer.\n3. Consider as proposal a location-scale version of the Student-t with $\\nu=3$\n degrees of freedom. Find the optimal location and scale parameters and the upper bound $C$ for your choice.\n4. Use the accept-reject to simulate 1000 independent observations and compute the empirical acceptance rate.\n\n## Exercise 1.4\n\n<!--\nThe ratio-of-uniform method, implemented in the [`rust` **R** package](https://paulnorthrop.github.io/rust/index.html), can be used to simulate independent draws from an unnormalized density function assuming the latter is bounded after use of a Box--Cox transformation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(80601)\ndata(waiting, package = \"hecbayes\")\nnobs <- length(waiting) # number of observations\nybar <- mean(waiting)   # average waiting time\nB <- 1000L  # number of draws\n# Un-normalized log posterior: scaled log likelihood + log prior\nupost <- function(x){\n  dgamma(x = x, shape = nobs + 1L, rate = nobs*ybar, log = TRUE) +\n    log(2) + dt(x = x, df = 1, log = TRUE)}\npost_samp <- rust::ru(logf = upost,\n                      n = B,\n                      d = 1,  # dimension of parameter (scalar)\n                      init = nobs/ybar)$sim_vals # initial value of mode\n```\n:::\n\n\n\n\n\nEstimate using the Monte Carlo sample:\n\n1. the probability that the waiting time is between 20 and 40 seconds\n2. the average waiting time\n3. the standard deviation of the waiting time\n\n-->\n",
    "supporting": [
      "01-exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}